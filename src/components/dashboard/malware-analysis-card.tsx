"use client";

import { useState, useRef } from "react";
import { AlertTriangle, ShieldCheck, Loader2, Upload } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import type { Incident, IncidentRiskLevel } from "@/lib/types";
import { analyzeEmailForPhishing, type AnalyzeEmailForPhishingOutput } from "@/ai/flows/analyze-email-for-phishing";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Label } from "@/components/ui/label";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";

type MalwareAnalysisCardProps = {
  onNewIncident: (incident: Omit<Incident, 'id' | 'timestamp'>) => void;
  className?: string;
};

export function MalwareAnalysisCard({ onNewIncident, className }: MalwareAnalysisCardProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<AnalyzeEmailForPhishingOutput | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      setResult(null);
    }
  };

  const fileToDataUri = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  async function handleSubmit() {
    if (!selectedFile) {
      toast({
        variant: "destructive",
        title: "No File Selected",
        description: "Please select a file to analyze.",
      });
      return;
    }

    setIsLoading(true);
    setResult(null);
    try {
      const dataUri = await fileToDataUri(selectedFile);
      // We reuse the email phishing flow here as it can analyze attachments.
      const analysisResult = await analyzeEmailForPhishing({
        emailContent: "Analyzing file attachment for malware.",
        attachmentDataUris: [dataUri],
      });
      setResult(analysisResult);

      const risk = analysisResult.riskLevel.toLowerCase();
      if (risk === 'medium' || risk === 'high' || risk === 'critical') {
        onNewIncident({
          agent: 'Malware',
          riskLevel: analysisResult.riskLevel.toLowerCase() as IncidentRiskLevel,
          finding: `Potentially malicious file detected: ${selectedFile.name}`,
          details: { filename: selectedFile.name, ...analysisResult },
        });
      }
    } catch (error) {
      console.error("Malware analysis failed:", error);
      toast({
        variant: "destructive",
        title: "Analysis Failed",
        description: "Could not analyze the file.",
      });
    } finally {
      setIsLoading(false);
    }
  }
  
  const getRiskIcon = (risk: string) => {
    switch (risk.toLowerCase()) {
      case 'high':
      case 'critical':
        return <AlertTriangle className="h-4 w-4 text-destructive" />;
      case 'medium':
        return <AlertTriangle className="h-4 w-4 text-warning" />;
      default:
        return <ShieldCheck className="h-4 w-4 text-success" />;
    }
  };

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle>Malware Analysis</CardTitle>
        <CardDescription>
          This tool scans file attachments for malware and other threats. Select a file to begin the analysis.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="file-upload">File to analyze</Label>
            <div className="flex items-center gap-2">
              <Input id="file-upload" type="file" onChange={handleFileChange} ref={fileInputRef} className="hidden" />
              <Button variant="outline" onClick={() => fileInputRef.current?.click()} className="w-full justify-center">
                <Upload className="mr-2 h-4 w-4" />
                {selectedFile ? 'Change file' : 'Choose file'}
              </Button>
            </div>
            {selectedFile && <p className="text-sm text-muted-foreground truncate">Selected: {selectedFile.name}</p>}
          </div>
          <Button onClick={handleSubmit} disabled={isLoading || !selectedFile} className="w-full">
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Scan File
          </Button>
        </div>
        {result && (
          <Alert className="mt-4">
            <div className="flex items-center gap-2">
              {getRiskIcon(result.riskLevel)}
              <AlertTitle className="capitalize">
                {result.isPhishing ? `Potentially Malicious: ${result.riskLevel} Risk` : 'Looks Safe'}
              </AlertTitle>
            </div>
            <AlertDescription>
              <p className="font-semibold mt-2">Analysis:</p>
              <p>{result.reason}</p>
            </AlertDescription>
          </Alert>
        )}
      </CardContent>
    </Card>
  );
}
